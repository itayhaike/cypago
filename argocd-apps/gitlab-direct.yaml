apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: gitlab
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/gitlabhq/gitlabhq
    targetRevision: master
    path: workhorse/testdata
  destination:
    server: https://kubernetes.default.svc
    namespace: gitlab
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    managedNamespaceMetadata:
      labels:
        managed-by: argocd
---
# Since the above won't work without proper manifests, let's create a local application
# First, apply our manifests manually then create an Application to track them
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-setup
  namespace: argocd
spec:
  template:
    spec:
      serviceAccountName: argocd-application-controller  
      restartPolicy: Never
      containers:
      - name: setup
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          # Create GitLab resources manually
          kubectl create namespace gitlab || true
          
          # Create GitLab ConfigMap
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: gitlab-config
            namespace: gitlab
            labels:
              app.kubernetes.io/name: gitlab
              app.kubernetes.io/managed-by: argocd
          data:
            gitlab.rb: |
              external_url 'http://gitlab.example.local'
              prometheus['enable'] = false
              alertmanager['enable'] = false
              node_exporter['enable'] = false
              redis_exporter['enable'] = false
              postgres_exporter['enable'] = false
              pgbouncer_exporter['enable'] = false
              gitlab_exporter['enable'] = false
              grafana['enable'] = false
              puma['worker_processes'] = 1
              puma['min_threads'] = 1 
              puma['max_threads'] = 2
              puma['worker_timeout'] = 300
              puma['worker_memory_limit_min'] = "400m"
              puma['worker_memory_limit_max'] = "650m"
              sidekiq['max_concurrency'] = 3
              postgresql['shared_buffers'] = "64MB"
              postgresql['max_connections'] = 30
              postgresql['work_mem'] = "4MB"
              gitlab_pages['enable'] = false
              gitlab_kas['enable'] = false
              sentinel['enable'] = false
              registry['enable'] = false
              mattermost['enable'] = false
              nginx['worker_processes'] = 1
              nginx['worker_connections'] = 256
              nginx['redirect_http_to_https'] = false
              nginx['listen_port'] = 80
              gitlab_rails['initial_root_password'] = 'ChangeMeNow123!'
              gitlab_rails['usage_ping_enabled'] = false
              gitlab_rails['sentry_enabled'] = false
          EOF
          
          # Create GitLab Service
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: gitlab
            namespace: gitlab
            labels:
              app.kubernetes.io/name: gitlab
              app.kubernetes.io/managed-by: argocd
          spec:
            type: ClusterIP
            selector:
              app: gitlab
            ports:
            - name: http
              port: 80
              targetPort: 80
              protocol: TCP
            - name: ssh
              port: 22
              targetPort: 22
              protocol: TCP
          EOF
          
          # Create GitLab Deployment  
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: gitlab
            namespace: gitlab
            labels:
              app.kubernetes.io/name: gitlab
              app.kubernetes.io/managed-by: argocd
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: gitlab
            strategy:
              type: Recreate
            template:
              metadata:
                labels:
                  app: gitlab
              spec:
                nodeSelector:
                  role: app
                securityContext:
                  runAsUser: 0
                  runAsGroup: 0
                  fsGroup: 0
                containers:
                - name: gitlab
                  image: gitlab/gitlab-ce:latest
                  imagePullPolicy: IfNotPresent
                  ports:
                  - containerPort: 80
                    name: http
                  - containerPort: 22
                    name: ssh
                  env:
                  - name: GITLAB_OMNIBUS_CONFIG
                    value: |
                      from_file('/etc/gitlab/gitlab.rb')
                  securityContext:
                    privileged: true
                    capabilities:
                      add:
                      - SYS_ADMIN
                      - SYS_RESOURCE
                  resources:
                    requests:
                      cpu: 500m
                      memory: 2.5Gi
                    limits:
                      cpu: 1500m
                      memory: 3.5Gi
                  volumeMounts:
                  - name: gitlab-data
                    mountPath: /var/opt/gitlab
                  - name: gitlab-logs
                    mountPath: /var/log/gitlab
                  - name: gitlab-config
                    mountPath: /etc/gitlab
                    subPath: config
                  - name: gitlab-config-rb
                    mountPath: /etc/gitlab/gitlab.rb
                    subPath: gitlab.rb
                  livenessProbe:
                    httpGet:
                      path: /-/liveness
                      port: 80
                    initialDelaySeconds: 600
                    periodSeconds: 60
                    timeoutSeconds: 30
                    successThreshold: 1
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 80
                    initialDelaySeconds: 300
                    periodSeconds: 60
                    timeoutSeconds: 30
                    successThreshold: 1
                    failureThreshold: 5
                volumes:
                - name: gitlab-data
                  emptyDir:
                    sizeLimit: 10Gi
                - name: gitlab-logs
                  emptyDir: {}
                - name: gitlab-config
                  emptyDir: {}
                - name: gitlab-config-rb
                  configMap:
                    name: gitlab-config
                    items:
                    - key: gitlab.rb
                      path: gitlab.rb
          EOF
          
          echo "GitLab deployed successfully!"
  backoffLimit: 3